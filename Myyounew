#!/usr/bin/env python3
import os, json, socket
from urllib.parse import urlparse
from dotenv import load_dotenv
from azure.core.credentials import AzureKeyCredential
from azure.core.exceptions import ResourceNotFoundError
from azure.ai.documentintelligence import DocumentIntelligenceClient, DocumentModelAdministrationClient

def validate_endpoint(endpoint: str):
    parsed = urlparse(endpoint)
    if parsed.scheme not in ("https",):
        raise ValueError("ENDPOINT must start with https://")
    if not parsed.hostname:
        raise ValueError("ENDPOINT missing hostname")
    try:
        socket.gethostbyname(parsed.hostname)
    except Exception:
        raise ValueError(f"Cannot resolve host '{parsed.hostname}'. Check ENDPOINT in .env.")

def get_env():
    load_dotenv()
    endpoint = os.getenv("ENDPOINT")
    key = os.getenv("KEY")
    model_id = os.getenv("MODEL_ID")
    if not endpoint or not key or not model_id:
        raise ValueError("Missing ENDPOINT, KEY, or MODEL_ID in .env")
    return endpoint, key, model_id

def ensure_model_exists(endpoint: str, key: str, model_id: str):
    admin = DocumentModelAdministrationClient(endpoint=endpoint, credential=AzureKeyCredential(key))
    try:
        model = admin.get_model(model_id)
        # Success: model exists
        return model
    except ResourceNotFoundError:
        # List available models to help the user pick the right one
        available = list(admin.list_models())
        names = []
        for m in available:
            # m has properties like model_id and description (display name)
            names.append({"model_id": getattr(m, "model_id", None), "description": getattr(m, "description", None)})
        msg_lines = [
            f"‚ùå Model not found: '{model_id}'.",
            "Here are some models in this resource (use the 'model_id' value in your .env):",
        ]
        for i, it in enumerate(names[:10], 1):
            msg_lines.append(f"  {i}. model_id={it['model_id']}  display_name={it['description']}")
        hint = (
            "\nTIP: In Studio, open the model and copy the **Model ID** (GUID), not the display name.\n"
            "Update .env: MODEL_ID=<the GUID>\n"
        )
        raise ValueError("\n".join(msg_lines) + hint)

def main():
    endpoint, key, model_id = get_env()
    validate_endpoint(endpoint)

    input_path = os.path.join(os.getcwd(), "input.pdf")
    output_path = os.path.join(os.getcwd(), "output.json")
    if not os.path.exists(input_path):
        raise FileNotFoundError(f"Place your document as 'input.pdf' in {os.getcwd()}")

    print("üîó Connecting to Azure Document Intelligence service...")
    # Validate model exists and is accessible in this resource/region
    ensure_model_exists(endpoint, key, model_id)

    client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))

    print(f"üìÑ Analyzing '{input_path}' using model '{model_id}'...")
    with open(input_path, "rb") as f:
        # IMPORTANT: no hyphens; use keyword 'document'
        poller = client.begin_analyze_document(model_id=model_id, document=f)
        result = poller.result()

    print("üíæ Saving exact results to 'output.json'...")
    with open(output_path, "w", encoding="utf-8") as wf:
        json.dump(result.to_dict(), wf, indent=2, ensure_ascii=False)

    print("\n‚úÖ Done!")
    print(f"üìÇ Input : {input_path}")
    print(f"üìÅ Output: {output_path}\n")

if __name__ == "__main__":
    main()
