async def compare_name_with_sanctions(json_file_url: str) -> dict:
    """
    Flow:
    1) Parse the given blob URL -> (container, blob_name)
    2) Download and parse the JSON file
    3) Extract FIRST matching name among:
       Owner Name / Insured Name / Contact Name / Named Insured(s)
       (case-insensitive, ignores spaces and colons)
    4) Read local CSV from 'input/sanctions.csv'
    5) Compare extracted name against CSV entity_name column
    6) Save results to ./output and return response
    """
    # Validate environment setup
    try:
        _require_env()
    except Exception as e:
        return {"status": False, "error": str(e)}

    # Parse JSON file URL
    try:
        container_name, blob_name = _parse_blob_url(json_file_url)
    except Exception as e:
        return {"status": False, "error": f"Invalid jsonfilepath: {e}"}

    # Download JSON file from Azure Blob
    try:
        async with BlobServiceClient.from_connection_string(AZURE_STORAGE_CONNECTION_STRING) as blob_service:
            container_client = blob_service.get_container_client(container_name)
            blob_client = container_client.get_blob_client(blob_name)

            try:
                await blob_client.get_blob_properties()
            except ResourceNotFoundError:
                return {
                    "status": False,
                    "error": f"JSON blob not found: container='{container_name}', blob='{blob_name}'"
                }

            stream = await blob_client.download_blob()
            raw_bytes = await stream.readall()
    except Exception as e:
        return {"status": False, "error": f"Error connecting to Azure Blob Storage: {e}"}

    # Parse JSON content
    try:
        data = json.loads(raw_bytes.decode("utf-8"))
    except Exception as e:
        return {
            "status": False,
            "error": f"Failed to parse JSON: {e}",
            "json_blob_url": json_file_url
        }

    # Extract Owner/Insured/Contact Name
    target_labels = {
        "ownername",
        "insuredname",
        "contactname",
        "namedinsured(s)"  # âœ… Added support
    }

    extracted_name = None
    fields = data.get("extracted_fields", [])

    if isinstance(fields, list):
        for item in fields:
            if isinstance(item, dict):
                label_raw = item.get("Field", "")
                if isinstance(label_raw, str):
                    normalized_label = label_raw.lower().replace(" ", "").replace(":", "")
                    if normalized_label in target_labels:
                        value = item.get("Value", "").strip()
                        if value:
                            extracted_name = value
                            break

    if not extracted_name:
        return {
            "status": False,
            "error": "No matching name field found in JSON. "
                     "Expected one of: Owner Name / Insured Name / Contact Name / Named Insured(s).",
            "json_blob_url": json_file_url
        }

    # Read local CSV
    if not os.path.exists(LOCAL_CSV_PATH):
        return {"status": False, "error": f"Local CSV not found at '{LOCAL_CSV_PATH}'"}

    try:
        csv_df = pd.read_csv(LOCAL_CSV_PATH)
    except Exception as e:
        return {"status": False, "error": f"Failed to read CSV '{LOCAL_CSV_PATH}': {e}"}

    if "entity_name" not in csv_df.columns:
        return {"status": False, "error": f"CSV must contain 'entity_name' column"}

    # Compare extracted name with sanctions list
    def normalize(value: str) -> str:
        return value.strip().lower() if isinstance(value, str) else ""

    entity_set = {normalize(x) for x in csv_df["entity_name"].dropna()}
    is_unique = normalize(extracted_name) not in entity_set

    results = [{"Extracted Name": extracted_name, "Unique": is_unique}]

    # Save outputs
    try:
        os.makedirs("./output", exist_ok=True)
        json_output = "./output/comparison_results.json"
        excel_output = "./output/comparison_results.xlsx"

        with open(json_output, "w", encoding="utf-8") as f:
            json.dump(
                {
                    "json_blob_url": json_file_url,
                    "container": container_name,
                    "blob_name": blob_name,
                    "csv_path": LOCAL_CSV_PATH,
                    "results": results
                },
                f,
                indent=4
            )

        pd.DataFrame(results).to_excel(excel_output, index=False)
    except Exception as e:
        return {"status": False, "error": f"Failed saving results: {e}"}

    return {
        "status": True,
        "message": "Comparison completed successfully.",
        "json_blob_url": json_file_url,
        "container": container_name,
        "blob_name": blob_name,
        "csv_path": LOCAL_CSV_PATH,
        "json_result": json_output,
        "excel_result": excel_output,
        "results": results
    }
