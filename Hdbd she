json 

{
    "overall_confidence": 0.7562,
    "extracted_fields": [
        {
            "Field": "AGENCY CUSTOMER ID:",
            "Value": "542198",
            "Selected": false,
            "Confidence": 0.363
        },
        {
            "Field": "DATE (MM/DD/YYYY)",
            "Value": "07/15/2025",
            "Selected": false,
            "Confidence": 0.626
        },
        {
            "Field": "AGENCY",
            "Value": "Prime Brokers Ltd.",
            "Selected": false,
            "Confidence": 0.855
        },
        {
            "Field": "CARRIER",
            "Value": "Phoenix Insurers Ltd",
            "Selected": false,
            "Confidence": 0.855
        },
        {
            "Field": "EFFECTIVE DATE",
            "Value": "Berkshire",
            "Selected": false,
            "Confidence": 0.582
        },
        {
            "Field": "Owner Name:",
            "Value": "Hathaway",
            "Selected": false,
            "Confidence": 0.53
        },
        {
            "Field": "OCCURRENCE",
            "Value": "$ 25000",
            "Selected": false,
            "Confidence": 0.118
        },
        {
            "Field": "DAMAGE TO RENTED PREMISES (each occurre ce)",
            "Value": "$ 50000",
            "Selected": false,
            "Confidence": 0.349
        },
        {
            "Field": "(S) GROSS SALES - PER",
            "Value": "$1,000/SALES",
            "Selected": false,
            "Confidence": 0.825
        },
        {
            "Field": "PROPOSED RETROACTIVE DATE:",
            "Value": "06/01/2025",
            "Selected": false,
            "Confidence": 0.84
        },
        {
            "Field": "ENTRY DATE INTO UNINTERRUPTED CLAIMS MADE COVERAGE:",
            "Value": "07/15/2025",
            "Selected": false,
            "Confidence": 0.316
        },
        {
            "Field": "DEDUCTIBLE PER CLAIM:",
            "Value": "$ 10000",
            "Selected": false,
            "Confidence": 0.831
        },
        {
            "Field": "NUMBER OF EMPLOYEES:",
            "Value": "4500",
            "Selected": false,
            "Confidence": 0.846
        },
        {
            "Field": "NUMBER OF EMPLOYEES COVERED BY EMPLOYEE BENEFITS PLANS:",
            "Value": "3900",
            "Selected": false,
            "Confidence": 0.791
        },
        {
            "Field": "RETROACTIVE DATE:",
            "Value": "06/01/2025",
            "Selected": false,
            "Confidence": 0.869
        },
        {
            "Field": "EVIDENCE:",
            "Value": "CERTIFICATE",
            "Selected": false,
            "Confidence": 0.886
        },
        {
            "Field": "LOCATION:",
            "Value": "IL",
            "Selected": false,
            "Confidence": 0.909
        },
        {
            "Field": "BUILDING:",
            "Value": "NB01",
            "Selected": false,
            "Confidence": 0.909
        },
        {
            "Field": "CLASS:",
            "Value": "ITEM",
            "Selected": false,
            "Confidence": 0.552
        },
        {
            "Field": "ITEM DESCRIPTION",
            "Value": "Commercial Office",
            "Selected": false,
            "Confidence": 0.872
        },
        {
            "Field": "ANY PARKING FACILITIES OWNED/RENTED?",
            "Value": "Yes, Basement Parking - Owned",
            "Selected": false,
            "Confidence": 0.825
        },
        {
            "Field": "IS A FEE CHARGED FOR PARKING?",
            "Value": "per hour",
            "Selected": false,
            "Confidence": 0.825
        },
        {
            "Field": "RECREATION FACILITIES PROVIDED?",
            "Value": "Swimming Pool, Gym, Badminton Court, Table Tennis Room",
            "Selected": false,
            "Confidence": 0.817
        },
        {
            "Field": "IS THERE A FORMAL, WRITTEN SAFETY AND SECURITY POLICY IN EFFECT?",
            "Value": "Security Policy is in effect",
            "Selected": false,
            "Confidence": 0.318
        },
        {
            "Field": "PRODUCER'S SIGNATURE",
            "Value": "William Grey",
            "Selected": false,
            "Confidence": 0.851
        },
        {
            "Field": "PRODUCER'S NAME (Plea e Pri t)",
            "Value": "William Grey",
            "Selected": false,
            "Confidence": 0.825
        },
        {
            "Field": "APPLICANT'S SIGNATURE",
            "Value": "Berkshire Hathaway",
            "Selected": false,
            "Confidence": 0.846
        },
        {
            "Field": "DATE",
            "Value": "07/15/2025",
            "Selected": false,
            "Confidence": 0.901
        },
        {
            "Field": "NATIONAL PRODUCER NUMBER",
            "Value": "100-002541",
            "Selected": false,
            "Confidence": 0.855
        },
        {
            "Field": "COMMERCIAL GENERAL LIABILITY",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.845
        },
        {
            "Field": "CLAIMS MADE",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.87
        },
        {
            "Field": "POLICY",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.889
        },
        {
            "Field": "PROPERTY DAMAGE",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.87
        },
        {
            "Field": "BODILY INJURY",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.87
        },
        {
            "Field": "PER\nOCCURRENCE\nMEDICAL EXPENSE (A y o e per o )",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.809
        },
        {
            "Field": "ADDITIONAL INSURED",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.888
        },
        {
            "Field": "APPROVED FENCE",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.888
        },
        {
            "Field": "LIMITED ACCESS",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.888
        },
        {
            "Field": "LIFE GUARD",
            "Value": "no value",
            "Selected": true,
            "Confidence": 0.888
        }
    ]
}



so below is my current code and above is a json 
earlier i had to take excel as input and then compare the owner name: to name in sanctoions.csv but now the json has to be the input now instead of excel the above json 
will be the input it will be in same blob storage where excel is currently




file_router.py


from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from utils.file_utils import compare_excel_and_csv


# Initialize APIRouter
router = APIRouter()

# Pydantic Models
class CompareFilesRequest(BaseModel):
    """Request model for comparing Excel and CSV files."""
    excelfilename: str = Field(..., description="The name of the Excel file in Azure Blob Storage.")
    csvfilename: str = Field(..., description="The name of the CSV file in Azure Blob Storage.")

# API Endpoints
@router.post("/compare_files", operation_id="compare_files", summary="Compare Excel and CSV files from Azure Blob Storage.")
async def compare_files(request: CompareFilesRequest):
    """
    Endpoint to compare Excel and CSV files from Azure Blob Storage.
    """
    try:
        result = compare_excel_and_csv(
            excel_file_name=request.excelfilename,
            csv_file_name=request.csvfilename,
        )
        return result  # Already has status true/false
    except Exception as e:
        # Final fallback exception
        return {"status": False, "error": f"Unexpected server error: {str(e)}"}


file_utils.py


import os
import pandas as pd
import json
from io import BytesIO
from azure.storage.blob import BlobServiceClient
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Azure Blob Storage Configuration
AZURE_STORAGE_CONNECTION_STRING = os.environ.get("AZURE_STORAGE_CONNECTION_STRING", "")
AZURE_BLOB_CONTAINER = os.environ.get("AZURE_BLOB_CONTAINER", "")

def read_blob_file(blob_name: str):
    """Reads a file from Azure Blob Storage and returns its content as a BytesIO object."""
    try:
        if not AZURE_STORAGE_CONNECTION_STRING:
            raise ValueError("Azure Storage Connection String is missing. Please set AZURE_STORAGE_CONNECTION_STRING in .env")
        if not AZURE_BLOB_CONTAINER:
            raise ValueError("Azure Blob Container is missing. Please set AZURE_BLOB_CONTAINER in .env")

        blob_service_client = BlobServiceClient.from_connection_string(AZURE_STORAGE_CONNECTION_STRING)
        blob_client = blob_service_client.get_blob_client(container=AZURE_BLOB_CONTAINER, blob=blob_name)

        if not blob_client.exists():
            raise FileNotFoundError(f"Blob file '{blob_name}' not found in container '{AZURE_BLOB_CONTAINER}'.")

        blob_data = blob_client.download_blob().readall()
        return BytesIO(blob_data)

    except Exception as e:
        raise Exception(f"Error reading blob file '{blob_name}': {str(e)}")


def compare_excel_and_csv(excel_file_name: str, csv_file_name: str):
    """Compares an Excel file and a CSV file from Azure Blob Storage."""
    try:
        # Read files from Azure Blob Storage
        excel_file = read_blob_file(excel_file_name)
        csv_file = read_blob_file(csv_file_name)

        excel_data = pd.read_excel(excel_file)
        csv_data = pd.read_csv(csv_file)

        # Columns to compare
        owner_name_column = "OWNER NAME:"
        entity_name_column = "entity_name"

        if owner_name_column not in excel_data.columns:
            return {"status": False, "error": f"Column '{owner_name_column}' missing in Excel file."}
        if entity_name_column not in csv_data.columns:
            return {"status": False, "error": f"Column '{entity_name_column}' missing in CSV file."}

        # Extract and filter names
        owner_names = (
            excel_data[owner_name_column]
            .dropna()
            .tolist()
        )
        owner_names = [name for name in owner_names if isinstance(name, str) and name.strip()]

        entity_names = (
            csv_data[entity_name_column]
            .dropna()
            .tolist()
        )
        entity_names = [name for name in entity_names if isinstance(name, str) and name.strip()]

        # Compare
        results = [{"Owner Name": name, "Unique": name not in entity_names} for name in owner_names]

        # Save outputs
        output_dir = "./output"
        os.makedirs(output_dir, exist_ok=True)
        json_output_path = os.path.join(output_dir, "comparison_results.json")
        excel_output_path = os.path.join(output_dir, "comparison_results.xlsx")

        with open(json_output_path, "w") as json_file:
            json.dump(results, json_file, indent=4)

        pd.DataFrame(results).to_excel(excel_output_path, index=False)

        return {
            "status": True,
            "message": "Comparison completed successfully.",
            "json_result": json_output_path,
            "excel_result": excel_output_path,
            "results": results,
        }

    except Exception as e:
        return {"status": False, "error": str(e)}


main.py

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi_mcp import FastApiMCP
import uvicorn
# from routers import file_router

from routers.file_router import router as  file_router


# Shared CORS config
def apply_cors(app: FastAPI):
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_methods=["*"],
        allow_headers=["*"],
    )

# Agent-specific sub-apps
def create_sub_app(title: str, description: str, version: str = "0.1.0") -> FastAPI:
    app = FastAPI(title=title, description=description, version=version)
    apply_cors(app)
    return app

# Main app
app = FastAPI()
apply_cors(app)

# File Comparison Agent
file_app = create_sub_app(
    title="File Comparison API",
    description="API for comparing Excel and CSV files from a local folder."
)
file_app.include_router(file_router)
FastApiMCP(file_app, include_operations=["compare_files"]).mount_http()
app.mount("/api/v1/filecomparison", file_app)


# Entry point
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8601)
    




















