Below is the updated full code with proper exception handling as you requested.
✅ If everything runs successfully → status: true
❌ If any error/exception occurs → status: false + error message

⸻

✅ ✅ Updated Code

⸻

✅ file_router.py  (inside routers folder)

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from utils.file_utils import compare_excel_and_csv


# Initialize APIRouter
router = APIRouter()

# Pydantic Models
class CompareFilesRequest(BaseModel):
    """Request model for comparing Excel and CSV files."""
    excelfilename: str = Field(..., description="The name of the Excel file in Azure Blob Storage.")
    csvfilename: str = Field(..., description="The name of the CSV file in Azure Blob Storage.")

# API Endpoints
@router.post("/compare_files", operation_id="compare_files", summary="Compare Excel and CSV files from Azure Blob Storage.")
async def compare_files(request: CompareFilesRequest):
    """
    Endpoint to compare Excel and CSV files from Azure Blob Storage.
    """
    try:
        result = compare_excel_and_csv(
            excel_file_name=request.excelfilename,
            csv_file_name=request.csvfilename,
        )
        return result  # Already has status true/false
    except Exception as e:
        # Final fallback exception
        return {"status": False, "error": f"Unexpected server error: {str(e)}"}


⸻

✅ file_utils.py  (inside utils folder)

import os
import pandas as pd
import json
from io import BytesIO
from azure.storage.blob import BlobServiceClient
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Azure Blob Storage Configuration
AZURE_STORAGE_CONNECTION_STRING = os.environ.get("AZURE_STORAGE_CONNECTION_STRING", "")
AZURE_BLOB_CONTAINER = os.environ.get("AZURE_BLOB_CONTAINER", "")

def read_blob_file(blob_name: str):
    """Reads a file from Azure Blob Storage and returns its content as a BytesIO object."""
    try:
        if not AZURE_STORAGE_CONNECTION_STRING:
            raise ValueError("Azure Storage Connection String is missing. Please set AZURE_STORAGE_CONNECTION_STRING in .env")
        if not AZURE_BLOB_CONTAINER:
            raise ValueError("Azure Blob Container is missing. Please set AZURE_BLOB_CONTAINER in .env")

        blob_service_client = BlobServiceClient.from_connection_string(AZURE_STORAGE_CONNECTION_STRING)
        blob_client = blob_service_client.get_blob_client(container=AZURE_BLOB_CONTAINER, blob=blob_name)

        if not blob_client.exists():
            raise FileNotFoundError(f"Blob file '{blob_name}' not found in container '{AZURE_BLOB_CONTAINER}'.")

        blob_data = blob_client.download_blob().readall()
        return BytesIO(blob_data)

    except Exception as e:
        raise Exception(f"Error reading blob file '{blob_name}': {str(e)}")


def compare_excel_and_csv(excel_file_name: str, csv_file_name: str):
    """Compares an Excel file and a CSV file from Azure Blob Storage."""
    try:
        # Read files from Azure Blob Storage
        excel_file = read_blob_file(excel_file_name)
        csv_file = read_blob_file(csv_file_name)

        excel_data = pd.read_excel(excel_file)
        csv_data = pd.read_csv(csv_file)

        # Columns to compare
        owner_name_column = "OWNER NAME:"
        entity_name_column = "entity_name"

        if owner_name_column not in excel_data.columns:
            return {"status": False, "error": f"Column '{owner_name_column}' missing in Excel file."}
        if entity_name_column not in csv_data.columns:
            return {"status": False, "error": f"Column '{entity_name_column}' missing in CSV file."}

        # Extract names
        owner_names = excel_data[owner_name_column].dropna().astype(str).str.strip().tolist()
        entity_names = csv_data[entity_name_column].dropna().astype(str).str.strip().tolist()

        # Compare
        results = [{"Owner Name": name, "Unique": name not in entity_names} for name in owner_names]

        # Save outputs
        output_dir = "./output"
        os.makedirs(output_dir, exist_ok=True)
        json_output_path = os.path.join(output_dir, "comparison_results.json")
        excel_output_path = os.path.join(output_dir, "comparison_results.xlsx")

        with open(json_output_path, "w") as json_file:
            json.dump(results, json_file, indent=4)

        pd.DataFrame(results).to_excel(excel_output_path, index=False)

        return {
            "status": True,
            "message": "Comparison completed successfully.",
            "json_result": json_output_path,
            "excel_result": excel_output_path,
            "results": results,
        }

    except Exception as e:
        return {"status": False, "error": str(e)}


⸻

✅ main.py stays SAME ✅ (no change needed)

⸻

✅ testscripts.py (Optional improvement)

I can update this after you confirm ✅

⸻

✅ Next Question

Do you also want me to:
A. Add logging for debugging (info + error logs)?
B. Add detailed exception messages with stacktrace for debugging?
C. Keep it exactly as it is?

Reply A, B, or C ✅
