Sanction Check MCP API Documentation
1.1	Overview
This FastAPI application provides endpoints for listing files and comparing data between Excel and CSV files. The application performs sanction checks by comparing owner names from Excel files with entity names from CSV files, identifying unique entries that exist in the Excel file but not in the CSV file.
1.2	Base URL
http://localhost:8601



1.3	Data Models
CompareRequest
Request model for file comparison operations.
Field	Type	Required	Description
excelfilename	Optional[str]	No	Name of the Excel file to compare
csvfilename	Optional[str]	No	Name of the CSV file to compare
Example:
{
    "excelfilename": "owners.xlsx",
    "csvfilename": "entities.csv"
}


OUTPUT:

Note:
-	Name does not match with the sanction list – True, else, If matched then it is considered false


1.4	API Endpoints
GET /get_file_list
Retrieves a list of all files available in the ./input directory.
Request
•	Method: GET
•	URL: /get_file_list
•	Parameters: None
Response
•	Content-Type: application/json
•	Data Type: dict[str, List[str]]
Success Response (200):
{
    "message": ["file1.xlsx", "file2.csv", "data.xlsx"]
}
Example Usage
curl -X GET "http://localhost:8601/get_file_list"
POST /compare_files
Compares data between an Excel file and a CSV file, identifying owner names that don't exist in the entity list.
Request
•	Method: POST
•	URL: /compare_files
•	Content-Type: application/json
•	Body: CompareRequest object (excelfilename :Optional[str],    csvfilename :Optional[str])

Expected File Structure
•	Excel file: Must contain a column named "OWNER NAME:"
•	CSV file: Must contain a column named "entity_name"
Response
•	Content-Type: application/json
Success Response (200):
{
    "message": "Sanction Checks completed successfully.",
    "json_result": "./output/comparison_results.json",
    "excel_result": "./output/comparison_results.xlsx",
    "results": [
        {
            "Owner Name": "John Doe",
            "Unique": true  
        },
        {
            "Owner Name": "Jane Smith",
            "Unique": false
        }
    ]
}
Error Response (400):
{
    "error": "Both excelfilename and csvfilename must be provided."
}
{
    "error": "Required columns not found. Ensure 'OWNER NAME:' exists in Excel and 'entity_name' exists in CSV."
}
Error Response (500):
{
    "error": "File not found or invalid format"
}
Example Usage
curl -X POST "http://localhost:8601/compare_files" \
  -H "Content-Type: application/json" \
  -d '{
    "excelfilename": "owners.xlsx",
    "csvfilename": "entities.csv"
  }'

1.5	Code Logic and Functionality
File Listing Logic
The get_file_list endpoint uses os.listdir() to scan the ./input directory and return all available files as a list.
File Comparison Logic
The compare_files endpoint performs the following operations:
1.	File Validation: Checks if both Excel and CSV filenames are provided
2.	Data Loading:
o	Loads Excel data using pd.read_excel()
o	Loads CSV data using pd.read_csv()
3.	Column Verification: Ensures required columns exist in both files
4.	Data Processing:
o	Extracts owner names from Excel, removing NaN values and empty strings
o	Extracts entity names from CSV, removing NaN values
5.	Comparison: Identifies owner names that don't exist in the entity list
6.	Output Generation:
o	Creates comparison results with boolean flags
o	Saves results as JSON file in ./output/comparison_results.json
o	Saves results as Excel file in ./output/comparison_results.xlsx

1.6	Data Processing Flow
Input Files (Excel + CSV) 
    ↓
Column Validation
    ↓
Data Extraction & Cleaning
    ↓
Name Comparison Logic
    ↓
Result Generation
    ↓
File Output (JSON + Excel)
    ↓
API Response



FastApiMCP Integration
1.7	What is MCP?
The code uses FastApiMCP, a library that provides additional management and mounting capabilities for FastAPI applications. It allows for better control and modularity of API endpoints.
MCP Configuration
mcp = FastApiMCP(app, include_operations=["get_file_list", "compare_files"])
mcp.mount()
•	Purpose: Manages specific API operations
•	Operations: Only includes the two main endpoints
•	Mounting: Integrates with the FastAPI application for enhanced functionality
1.8	Directory Structure
./
├── input/          # Input files directory (Excel and CSV files)
├── output/         # Output files directory (generated results)
│   ├── comparison_results.json
│   └── comparison_results.xlsx
└── main.py         # Application code
1.9	Dependencies
•	FastAPI
•	pandas
•	uvicorn
•	pydantic
•	fastapi_mcp
•	json
•	pathlib
•	os
1.10	Server Configuration
The application runs on:
•	Host: 0.0.0.0 (accepts connections from any IP)
•	Port: 8601
•	Server: Uvicorn server


1.11	Error Handling
The API includes comprehensive error handling for:
•	Missing required parameters
•	File not found errors
•	Invalid file formats
•	Missing required columns in data files
•	General exceptions during processing
All errors return appropriate HTTP status codes and descriptive error messages in JSON format.

