Perfect ✅ Thanks for confirming.

Here is the final documentation for your project — formatted professionally so you can copy-paste directly into Word.

⸻

Attachment Checker MCP API – Documentation

⸻

1. Overview

The Attachment Checker MCP API is a FastAPI-based microservice that connects to Gmail to read email attachments and checks if the attachment filenames already exist in Azure Blob Storage. It helps in identifying duplicate documents and preventing redundant data storage.

This service runs using FastAPI, supports MCP (Model Context Protocol) integration, and includes continuous email polling to detect new incoming emails automatically.

⸻

2. Base URL

http://localhost:8502/mcp/attachment_checker_mcp


⸻

3. Features

✅ Fetches latest Gmail emails
✅ Extracts attachment filenames
✅ Compares with files stored in Azure Blob Storage
✅ Identifies duplicates
✅ MCP Compatible API design
✅ Background Gmail polling
✅ JSON-based response
✅ Includes status and error handling
✅ Logs attachment comparison in console for monitoring

⸻

4. API Request Format

Endpoint

POST /mcp/attachment_checker_mcp

Headers

Content-Type: application/json

Request Body

{
  "AgentName": "EmailAttachmentChecker",
  "UserId": "markRuffalo"
}

Both fields are optional and used only as identifiers. No functional change based on values.

⸻

5. Response Format

✅ Success Response

{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "status": true,
    "attachments": [
      { "filename": "file1.pdf", "is_duplicate": false }
    ]
  }
}

❌ Error Response

{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "status": false,
    "error": "Azure Storage connection failed"
  }
}


⸻

6. Response Field Description

Field	Type	Description
status	boolean	true on success, false on any failure
attachments	list	List of attachments with duplicate status
filename	string	Attachment name extracted from Gmail
is_duplicate	boolean	true if file exists in Azure Blob Storage
error	string	Error description in case of failure


⸻

7. Polling Behavior
	•	On startup, the service fetches the latest email and compares attachments once.
	•	Then it runs continuous Gmail polling every 10 seconds.
	•	If a new email arrives, it prints a full JSON summary in the terminal.
	•	Polling does not affect API calls. /attachment_checker_mcp can be called any time.

⸻

8. Folder Structure

project-root/
├── main.py                         # Main FastAPI entrypoint
├── attachment_service.py           # Email and polling service
├── attachment_handler.py           # Azure and Gmail attachment logic
├── gmail_watch.py                  # Gmail authentication helper
├── routers/
│   └── attachment_router.py        # API route
├── storage/
│   ├── attachments/                # JSON log of processed attachments
│   └── history_state.json          # Reserved for future use
├── credentials/
│   └── client_secret.json          # Gmail OAuth credentials
├── .env                            # Azure setup
└── requirements.txt


⸻

9. Environment Variables (.env)

AZURE_STORAGE_CONNECTION_STRING=your-azure-storage-connection-string
AZURE_BLOB_CONTAINER=your-container-name


⸻

10. Requirements

Dependency	Version
Python	3.10+
FastAPI	0.118.3
uvicorn	0.30.6
azure-storage-blob	12.23.1
google-api-python-client	2.146.0
google-auth-oauthlib	1.2.1
fastapi_mcp	0.4.0
python-dotenv	1.0.1


⸻

11. Setup Instructions

11.1 Clone & Install Dependencies

pip install -r requirements.txt

11.2 Gmail Authentication Setup
	•	Create Google OAuth credentials
	•	Download client_secret.json
	•	Place inside /credentials folder
	•	First run will open browser for Gmail login

11.3 Configure Azure Blob
	•	Create a Storage Account
	•	Create a Blob Container
	•	Add connection string and container name in .env

⸻

12. Run Server

python main.py

Server runs on:

http://localhost:8502


⸻

13. How It Works (Flow)

Startup →
Read latest Gmail email →
Extract attachments →
Compare with Azure Blob Storage →
Return result →
Begin polling Gmail every 10 seconds →
Detect new emails automatically →
Repeat comparison on new emails only


⸻

14. Error Handling

Error Case	Example Message
Azure not configured	Missing AZURE_STORAGE_CONNECTION_STRING
Gmail API failure	Authentication failed
No internet	Network unreachable
Blob container missing	Missing AZURE_BLOB_CONTAINER


⸻

15. MCP Integration

We use FastApiMCP to mount MCP-compatible API methods:

FastApiMCP(email_app, include_operations=["attachment_checker_mcp"]).mount_http()

This allows LLM agents and automation frameworks to call this API intelligently.

⸻

16. Future Enhancements

✅ Prevent duplicate processing using history tracking
✅ Support saving attachments to Azure
✅ Add webhook support
✅ Add monitoring dashboard
✅ Add multi-user Gmail support

⸻

If you want, I can also:
✅ Add diagrams
✅ Convert this into PDF format
✅ Create README.md for GitHub
✅ Add Swagger UI screenshots

Would you like me to add a system architecture diagram and flow diagram before finalizing? ✅

Reply:

Yes, add diagram also

or

No, keep only text
